0.9.0
-----

* Ported SFLvault-common and SFLvault-client to Python 3 (up to Python
  3.8 is currently supported).  The server and client-qt components
  haven't been touched for now.
* The key name used to store the wallet password no longer includes
  the machine hostname, which was breaking portability.  This makes it
  possible to share the same sflvault config across systems.

0.7.8.1
-------

Fix retro-compatibility bug


0.7.8
-----
* Added 'content' protocol handler, which will store a blob of content as the service secret.
* Added 'sflvault' protocol handler, which inherits 'content' (to store another vault's credentials)
* Added support to add a port-forwarding as part of an alias
* Major improvements to the QT client:
** Save password in QT client
** Main window remembers position and size
** Fix #3682: password show error
** Added desktop file
** Merged in Microsoft Windows version compatibility (should work, but more testing is needed)
** Updated protocol window to split arguments from the executable.
** Simplified service config interface
** Better error handling
** Revamped info-dock for a service, machine and customer.
** Added support for metadata.
* Added a minimal but important test suite
* Results are now sorted when searching (by machine name, and service URL)
* Added basic logging to the server
* Added support for metadata, for each service, with the first key, "prompt", being used by the 'sudo://', 'su://', and 'ssh://' handlers, to detect the shell prompt you'll be waiting for.  For the cases where the provided regexp weren't matching your shell.  The value for "prompt" should be a regular expression.

UPGRADE path:
* When upgrading to this version, the password stored in your Keyring will be invalidated, since a new standard and Windows-compatible way to store the password.  The new domain is "sflvault". Under Ubuntu, in Seahorse, it's in the "network credentials" section.

TODO (before release?):
* Minimal testing
* Fix coverage reporting
** Make use of SFLVAULT_IN_TEST to prevent ElGamal key generation
* Package the .desktop file in the debian client-qt package.
